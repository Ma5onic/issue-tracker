@model PagedList.IPagedList<IssueTracker.ViewModels.IssueIndexViewModel>
@using Microsoft.AspNet.Identity
@using PagedList.Mvc;

@section AddToHead {
    <link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
}

@{
    ViewBag.Title = IssueStrings.TitleIndex;
}

<ul class="nav nav-tabs">
    @if (Request.RawUrl.Contains("?SearchAssignee="))
    {
        <li role="presentation"><a href="@Url.Action("Index", "Issues")">@SharedStrings.TabAll</a></li>
        <li role="presentation" class="active"><a href="?SearchAssignee=@User.Identity.GetUserId()">@IssueStrings.TabAssignedToMe</a></li>
        <li role="presentation"><a href="?SearchReporter=@User.Identity.GetUserId()">@IssueStrings.TabCreatedByMe</a></li>
    }
    else if (Request.RawUrl.Contains("?SearchReporter="))
    {
        <li role="presentation"><a href="@Url.Action("Index", "Issues")">@SharedStrings.TabAll</a></li>
        <li role="presentation"><a href="?SearchAssignee=@User.Identity.GetUserId()">@IssueStrings.TabAssignedToMe</a></li>
        <li role="presentation" class="active"><a href="?SearchReporter=@User.Identity.GetUserId()">@IssueStrings.TabCreatedByMe</a></li>
    }
    else
    {
        <li role="presentation" class="active"><a href="@Url.Action("Index", "Issues")">@SharedStrings.TabAll</a></li>
        <li role="presentation"><a href="?SearchAssignee=@User.Identity.GetUserId()">@IssueStrings.TabAssignedToMe</a></li>
        <li role="presentation"><a href="?SearchReporter=@User.Identity.GetUserId()">@IssueStrings.TabReportedByMe</a></li>
    }
    <li id="create-button">
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Create", "Issues")'">
            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> @SharedStrings.ButtonAdd
        </button>
    </li>
</ul>

<br/><br/>

@using (Html.BeginForm())
{
    <table class="search-table">
        <tr>
            <td colspan="2">
                @Html.TextBox("SearchName", null, new { @class = "form-control", @placeholder = IssueStrings.SearchNamePlaceholder })
            </td>
            <td>
                @Html.DropDownList("SearchProject", null, IssueStrings.SelectProjectDefault, new { @class = "form-control" })
            </td>
            <td>
                @Html.DropDownList("SearchState", null, IssueStrings.SelectStateDefault, new { @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td>
                @Html.DropDownList("SearchAssignee", null, IssueStrings.SelectAssigneeDefault, new { @class = "form-control" })
            </td>
            <td>
                @Html.DropDownList("SearchReporter", null, IssueStrings.SelectReporterDefault, new { @class = "form-control" })
            </td>
            <td colspan="2" align="right">
                <table class="right-align">
                    <tr>
                        <td>
                            <input type="submit" value="@SharedStrings.ButtonSearch" class="btn btn-primary" />
                        </td>
                        <td>
                            <input type="reset" value="@SharedStrings.ButtonClear" class="btn btn-danger" />
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
}

<br />

@if (Model.Count == 0)
{
    <i>@IssueStrings.ListNoResult</i>
}
else
{
    <h2>@IssueStrings.TitleIndex</h2>

    <table class="table">
        <tr>
            <th>
                    @Html.ActionLink(IssueStrings.IssueTitle, "Index", new { sort = ViewBag.SummarySort })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().Assignee).ToString(), "Index", new { sort = ViewBag.AssigneeSort })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().Created).ToString(), "Index", new { sort = ViewBag.CreatedSort })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().Reporter).ToString(), "Index", new { sort = ViewBag.ReporterSort })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().Project).ToString(), "Index", new { sort = ViewBag.ProjectSort })
                </th>
                <th>
                    @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().State).ToString(), "Index", new { sort = ViewBag.StatusSort })
                </th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.ActionLink(Html.DisplayFor(modelItem => item.Name).ToString(), "Details", "Issues", new { id = item.Code }, null)
                </td>
                <td>
                    @if (item.Assignee != null)
                    {
                        @Html.DisplayFor(modelItem => item.Assignee.Email);
                    }
                    else
                    {
                        <span>unassigned</span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Reporter.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Project.Title)
                </td>
                <td>
                    <span class="label state" style="background-color: @Html.DisplayFor(modelItem => item.State.Colour);">@Html.DisplayFor(modelItem => item.State.Title)</span>
                </td>
            </tr>
        }
    </table>
    <br />

    <Text>@string.Format(@SharedStrings.Paging, Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber, Model.PageCount)</Text>
    @Html.PagedListPager(Model, page => Url.Action("Index",
        new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
}